#!/bin/bash

# Arcadis Fit - Test Script
# Ce script vous aide √† tester l'application depuis votre t√©l√©phone sur un agent cloud

echo "üèãÔ∏è Arcadis Fit - Script de Test"
echo "=================================="
echo ""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier les pr√©requis
check_prerequisites() {
    print_status "V√©rification des pr√©requis..."
    
    # V√©rifier Node.js
    if command -v node &> /dev/null; then
        NODE_VERSION=$(node --version)
        print_success "Node.js trouv√©: $NODE_VERSION"
    else
        print_error "Node.js n'est pas install√©"
        return 1
    fi
    
    # V√©rifier npm
    if command -v npm &> /dev/null; then
        NPM_VERSION=$(npm --version)
        print_success "npm trouv√©: $NPM_VERSION"
    else
        print_error "npm n'est pas install√©"
        return 1
    fi
    
    # V√©rifier Python
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 --version)
        print_success "Python3 trouv√©: $PYTHON_VERSION"
    else
        print_error "Python3 n'est pas install√©"
        return 1
    fi
    
    # V√©rifier Docker (optionnel)
    if command -v docker &> /dev/null; then
        print_success "Docker trouv√©"
    else
        print_warning "Docker n'est pas install√© (optionnel)"
    fi
    
    return 0
}

# Installer les d√©pendances du backend
install_backend_dependencies() {
    print_status "Installation des d√©pendances du backend..."
    
    if [ ! -d "backend" ]; then
        print_error "Le dossier backend n'existe pas"
        return 1
    fi
    
    cd backend
    
    if [ ! -f "package.json" ]; then
        print_error "package.json non trouv√© dans le dossier backend"
        return 1
    fi
    
    npm install
    if [ $? -eq 0 ]; then
        print_success "D√©pendances du backend install√©es"
    else
        print_error "Erreur lors de l'installation des d√©pendances du backend"
        return 1
    fi
    
    cd ..
}

# Installer les d√©pendances des services AI
install_ai_dependencies() {
    print_status "Installation des d√©pendances des services AI..."
    
    if [ ! -d "ai-services" ]; then
        print_error "Le dossier ai-services n'existe pas"
        return 1
    fi
    
    cd ai-services
    
    # Nutrition AI
    if [ -d "nutrition-ai" ]; then
        cd nutrition-ai
        if [ ! -f "requirements.txt" ]; then
            print_warning "requirements.txt non trouv√©, cr√©ation d'un fichier de base..."
            cat > requirements.txt << EOF
fastapi==0.104.1
uvicorn==0.24.0
pydantic==2.5.0
tensorflow==2.15.0
scikit-learn==1.3.2
pandas==2.1.4
numpy==1.24.3
python-dotenv==1.0.0
requests==2.31.0
joblib==1.3.2
EOF
        fi
        
        pip3 install -r requirements.txt
        if [ $? -eq 0 ]; then
            print_success "D√©pendances du service Nutrition AI install√©es"
        else
            print_error "Erreur lors de l'installation des d√©pendances Nutrition AI"
        fi
        cd ..
    fi
    
    cd ..
}

# D√©marrer le backend
start_backend() {
    print_status "D√©marrage du backend..."
    
    cd backend
    
    # V√©rifier si le fichier .env existe
    if [ ! -f ".env" ]; then
        print_warning "Fichier .env non trouv√©, cr√©ation d'un fichier de test..."
        cat > .env << EOF
# Configuration de test pour Arcadis Fit
NODE_ENV=development
PORT=3000
API_BASE_URL=http://localhost:3000

# Supabase (√† configurer)
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_ANON_KEY=your-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key

# JWT
JWT_SECRET=test-jwt-secret-key-for-development-only
JWT_EXPIRES_IN=7d

# Twilio (√† configurer)
TWILIO_ACCOUNT_SID=your-twilio-account-sid
TWILIO_AUTH_TOKEN=your-twilio-auth-token
TWILIO_PHONE_NUMBER=+1234567890

# DEXCHANGE (√† configurer)
DEXCHANGE_API_URL=https://api.dexchange.com
DEXCHANGE_API_KEY=your-dexchange-api-key
DEXCHANGE_SECRET_KEY=your-dexchange-secret-key
DEXCHANGE_MERCHANT_ID=your-merchant-id

# AI Services
NUTRITION_AI_URL=http://localhost:8001
WORKOUT_AI_URL=http://localhost:8002

# Localisation
DEFAULT_LANGUAGE=fr
DEFAULT_CURRENCY=XOF
DEFAULT_COUNTRY=Senegal
DEFAULT_PHONE_CODE=+221

# Feature flags
ENABLE_AI_FEATURES=true
ENABLE_PAYMENT_PROCESSING=false
ENABLE_PUSH_NOTIFICATIONS=false
ENABLE_ANALYTICS=false
ENABLE_SWAGGER=true
ENABLE_DEBUG_MODE=true
MOCK_PAYMENT_GATEWAY=true
MOCK_SMS_SERVICE=true
EOF
    fi
    
    # D√©marrer le serveur
    npm run dev &
    BACKEND_PID=$!
    
    # Attendre que le serveur d√©marre
    sleep 5
    
    # V√©rifier si le serveur fonctionne
    if curl -s http://localhost:3000/health > /dev/null; then
        print_success "Backend d√©marr√© avec succ√®s sur http://localhost:3000"
        echo $BACKEND_PID > backend.pid
    else
        print_error "Erreur lors du d√©marrage du backend"
        kill $BACKEND_PID 2>/dev/null
        return 1
    fi
    
    cd ..
}

# D√©marrer les services AI
start_ai_services() {
    print_status "D√©marrage des services AI..."
    
    cd ai-services
    
    # Nutrition AI
    if [ -d "nutrition-ai" ]; then
        cd nutrition-ai
        python3 main.py &
        NUTRITION_AI_PID=$!
        sleep 3
        
        if curl -s http://localhost:8001/health > /dev/null; then
            print_success "Service Nutrition AI d√©marr√© sur http://localhost:8001"
            echo $NUTRITION_AI_PID > nutrition-ai.pid
        else
            print_error "Erreur lors du d√©marrage du service Nutrition AI"
        fi
        cd ..
    fi
    
    cd ..
}

# Afficher les informations de test
show_test_info() {
    echo ""
    echo "üéØ Informations de Test"
    echo "======================="
    echo ""
    
    # Obtenir l'IP publique
    PUBLIC_IP=$(curl -s ifconfig.me 2>/dev/null || echo "Non disponible")
    
    echo "üì± Pour tester depuis votre t√©l√©phone :"
    echo ""
    echo "1. Backend API:"
    echo "   - Local: http://localhost:3000"
    echo "   - Public: http://$PUBLIC_IP:3000"
    echo "   - Health check: http://$PUBLIC_IP:3000/health"
    echo ""
    
    echo "2. Services AI:"
    echo "   - Nutrition AI: http://$PUBLIC_IP:8001"
    echo "   - Health check: http://$PUBLIC_IP:8001/health"
    echo ""
    
    echo "3. Documentation API:"
    echo "   - Swagger UI: http://$PUBLIC_IP:3000/api-docs"
    echo ""
    
    echo "üîß Configuration requise :"
    echo ""
    echo "1. Ouvrez le port 3000 sur votre agent cloud :"
    echo "   - AWS: Ajoutez une r√®gle de s√©curit√© pour le port 3000"
    echo "   - Google Cloud: Cr√©ez une r√®gle de pare-feu pour le port 3000"
    echo "   - Azure: Configurez le groupe de s√©curit√© r√©seau"
    echo ""
    
    echo "2. Testez l'API depuis votre t√©l√©phone :"
    echo "   curl http://$PUBLIC_IP:3000/health"
    echo ""
    
    echo "3. Pour tester l'onboarding :"
    echo "   curl -X POST http://$PUBLIC_IP:3000/api/auth/register \\"
    echo "     -H 'Content-Type: application/json' \\"
    echo "     -d '{\"email\":\"test@example.com\",\"password\":\"password123\",\"fullName\":\"Test User\",\"phoneNumber\":\"+221123456789\"}'"
    echo ""
}

# Fonction pour arr√™ter tous les services
stop_services() {
    print_status "Arr√™t des services..."
    
    # Arr√™ter le backend
    if [ -f "backend/backend.pid" ]; then
        BACKEND_PID=$(cat backend/backend.pid)
        kill $BACKEND_PID 2>/dev/null
        rm backend/backend.pid
        print_success "Backend arr√™t√©"
    fi
    
    # Arr√™ter les services AI
    if [ -f "ai-services/nutrition-ai/nutrition-ai.pid" ]; then
        NUTRITION_AI_PID=$(cat ai-services/nutrition-ai/nutrition-ai.pid)
        kill $NUTRITION_AI_PID 2>/dev/null
        rm ai-services/nutrition-ai/nutrition-ai.pid
        print_success "Service Nutrition AI arr√™t√©"
    fi
    
    # Arr√™ter tous les processus Node.js
    pkill -f "node.*server.js" 2>/dev/null
    pkill -f "python.*main.py" 2>/dev/null
}

# Fonction pour nettoyer
cleanup() {
    print_status "Nettoyage..."
    stop_services
    print_success "Nettoyage termin√©"
}

# Gestionnaire de signaux pour arr√™ter proprement
trap cleanup EXIT INT TERM

# Menu principal
show_menu() {
    echo ""
    echo "üìã Menu de Test"
    echo "==============="
    echo "1. V√©rifier les pr√©requis"
    echo "2. Installer les d√©pendances"
    echo "3. D√©marrer tous les services"
    echo "4. Afficher les informations de test"
    echo "5. Arr√™ter tous les services"
    echo "6. Test complet (1-4)"
    echo "0. Quitter"
    echo ""
    read -p "Choisissez une option (0-6): " choice
    echo ""
    
    case $choice in
        1)
            check_prerequisites
            ;;
        2)
            install_backend_dependencies
            install_ai_dependencies
            ;;
        3)
            start_backend
            start_ai_services
            ;;
        4)
            show_test_info
            ;;
        5)
            stop_services
            ;;
        6)
            check_prerequisites && \
            install_backend_dependencies && \
            install_ai_dependencies && \
            start_backend && \
            start_ai_services && \
            show_test_info
            ;;
        0)
            print_status "Au revoir !"
            exit 0
            ;;
        *)
            print_error "Option invalide"
            ;;
    esac
}

# Fonction principale
main() {
    echo "üèãÔ∏è Arcadis Fit - Script de Test"
    echo "=================================="
    echo ""
    echo "Ce script vous aide √† tester l'application depuis votre t√©l√©phone"
    echo "sur un agent cloud."
    echo ""
    
    # V√©rifier si on est dans le bon r√©pertoire
    if [ ! -f "README.md" ] || [ ! -d "backend" ]; then
        print_error "Ce script doit √™tre ex√©cut√© depuis la racine du projet Arcadis Fit"
        exit 1
    fi
    
    # Afficher le menu
    while true; do
        show_menu
        echo ""
        read -p "Appuyez sur Entr√©e pour continuer..."
    done
}

# Ex√©cuter le script principal
main "$@"