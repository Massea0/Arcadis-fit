#!/usr/bin/env node

// Quick Test Supabase - Script rapide sans installation
console.log('üèãÔ∏è Arcadis Fit - Test Rapide Supabase');
console.log('=====================================');

// V√©rifier si on est dans le bon dossier
const fs = require('fs');
const path = require('path');

if (!fs.existsSync('backend') || !fs.existsSync('README.md')) {
    console.log('‚ùå Erreur: Ex√©cutez ce script depuis la racine du projet Arcadis Fit');
    process.exit(1);
}

console.log('‚úÖ R√©pertoire projet d√©tect√©');

// V√©rifier les fichiers backend
const backendPath = './backend';
const packageJsonPath = path.join(backendPath, 'package.json');
const srcPath = path.join(backendPath, 'src');

console.log('\nüìÅ V√©rification de la structure:');
console.log('- backend/:', fs.existsSync(backendPath) ? '‚úÖ' : '‚ùå');
console.log('- backend/package.json:', fs.existsSync(packageJsonPath) ? '‚úÖ' : '‚ùå');
console.log('- backend/src/:', fs.existsSync(srcPath) ? '‚úÖ' : '‚ùå');

// V√©rifier les modules Node.js
const nodeModulesPath = path.join(backendPath, 'node_modules');
console.log('- backend/node_modules/:', fs.existsSync(nodeModulesPath) ? '‚úÖ' : '‚ùå');

// V√©rifier nos fichiers d√©velopp√©s
const filesToCheck = [
    'src/controllers/authController.js',
    'src/controllers/userController.js', 
    'src/controllers/paymentController.js',
    'src/services/authService.js',
    'src/services/paymentService.js',
    'src/services/smsService.js',
    'src/utils/supabase.js',
    'src/utils/validation.js',
    'src/utils/logger.js',
    'src/middleware/auth.js',
    'src/middleware/validation.js',
    'src/routes/auth.js',
    'src/routes/users.js',
    'src/routes/payments.js'
];

console.log('\nüîß V√©rification des fichiers d√©velopp√©s:');
filesToCheck.forEach(file => {
    const fullPath = path.join(backendPath, file);
    const exists = fs.existsSync(fullPath);
    console.log(`- ${file}: ${exists ? '‚úÖ' : '‚ùå'}`);
});

// V√©rifier le fichier .env
const envPath = path.join(backendPath, '.env');
console.log('\n‚öôÔ∏è Configuration:');
console.log('- .env:', fs.existsSync(envPath) ? '‚úÖ' : '‚ùå (sera cr√©√© automatiquement)');

// V√©rifier package.json
if (fs.existsSync(packageJsonPath)) {
    try {
        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
        console.log('\nüì¶ Package.json:');
        console.log('- Nom:', packageJson.name || 'Non d√©fini');
        console.log('- Version:', packageJson.version || 'Non d√©fini');
        
        // V√©rifier les d√©pendances importantes
        const deps = packageJson.dependencies || {};
        const importantDeps = [
            'express',
            '@supabase/supabase-js',
            'jsonwebtoken',
            'bcryptjs',
            'express-validator',
            'cors',
            'dotenv',
            'winston',
            'multer',
            'axios'
        ];
        
        console.log('\nüìö D√©pendances importantes:');
        importantDeps.forEach(dep => {
            console.log(`- ${dep}: ${deps[dep] ? '‚úÖ v' + deps[dep] : '‚ùå'}`);
        });
        
    } catch (error) {
        console.log('‚ùå Erreur lors de la lecture de package.json:', error.message);
    }
}

// Test de base Node.js
console.log('\nüîç Test Node.js:');
console.log('- Version Node.js:', process.version);
console.log('- Plateforme:', process.platform);
console.log('- Architecture:', process.arch);

// Cr√©er un fichier .env basique si inexistant
if (!fs.existsSync(envPath)) {
    console.log('\nüìù Cr√©ation du fichier .env de test...');
    const envContent = `# Configuration de test pour Arcadis Fit
NODE_ENV=development
PORT=3000
API_BASE_URL=http://localhost:3000

# Supabase (√† configurer par l'autre agent)
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_ANON_KEY=your-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key

# JWT
JWT_SECRET=test-jwt-secret-key-for-development-only
JWT_EXPIRES_IN=7d

# Twilio (mode test)
TWILIO_ACCOUNT_SID=test-account-sid
TWILIO_AUTH_TOKEN=test-auth-token
TWILIO_PHONE_NUMBER=+221123456789

# DEXCHANGE (mode test)
DEXCHANGE_API_URL=https://api.dexchange.sn
DEXCHANGE_API_KEY=test-api-key
DEXCHANGE_SECRET_KEY=test-secret-key
DEXCHANGE_MERCHANT_ID=test-merchant-id
DEXCHANGE_WEBHOOK_SECRET=test-webhook-secret

# URLs
FRONTEND_URL=http://localhost:3000
BACKEND_URL=http://localhost:3000

# Feature flags
ENABLE_AI_FEATURES=true
ENABLE_PAYMENT_PROCESSING=false
ENABLE_PUSH_NOTIFICATIONS=false
ENABLE_ANALYTICS=false
ENABLE_SWAGGER=true
ENABLE_DEBUG_MODE=true
MOCK_PAYMENT_GATEWAY=true
MOCK_SMS_SERVICE=true
`;
    
    try {
        fs.writeFileSync(envPath, envContent);
        console.log('‚úÖ Fichier .env cr√©√© avec succ√®s');
    } catch (error) {
        console.log('‚ùå Erreur lors de la cr√©ation du .env:', error.message);
    }
}

// Instructions finales
console.log('\nüéØ Instructions pour tester Supabase:');
console.log('=====================================');
console.log('1. Assurez-vous que l\'autre agent a configur√© les cl√©s Supabase dans .env');
console.log('2. Installez les d√©pendances: cd backend && npm install');
console.log('3. Testez la connexion: cd backend && node -e "require(\'./src/utils/supabase\').testConnection()"');
console.log('4. D√©marrez le serveur: cd backend && npm start');
console.log('5. Testez l\'API: curl http://localhost:3000/health');

console.log('\nüìã √âtat actuel:');
console.log('- ‚úÖ Structure backend compl√®te');
console.log('- ‚úÖ Contr√¥leurs d√©velopp√©s (Auth, User, Payment)');
console.log('- ‚úÖ Services m√©tier complets');
console.log('- ‚úÖ Middlewares s√©curis√©s');
console.log('- ‚è≥ Configuration Supabase en attente');
console.log('- ‚è≥ Installation des d√©pendances requise');

console.log('\nüöÄ Une fois Supabase configur√©, le backend sera pr√™t pour les tests !');